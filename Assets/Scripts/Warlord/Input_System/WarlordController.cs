//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Warlord/Input_System/WarlordController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WarlordController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WarlordController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WarlordController"",
    ""maps"": [
        {
            ""name"": ""W_Controller"",
            ""id"": ""67a3b09c-34e6-4302-af9d-dfb671c00d9c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""83099d88-daea-4d0d-8e82-5a03c0fd1308"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoAttack"",
                    ""type"": ""Button"",
                    ""id"": ""cfa170d0-3b28-400d-8bc2-403f6f0747ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability1"",
                    ""type"": ""Button"",
                    ""id"": ""6b75431c-5184-4c6a-a798-0d931ad152a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability2"",
                    ""type"": ""Button"",
                    ""id"": ""283d0461-04bd-436a-be60-25a931478e4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability3"",
                    ""type"": ""Button"",
                    ""id"": ""28ac2b0d-76d4-49f9-84eb-ef93e204ea7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraFocus"",
                    ""type"": ""Button"",
                    ""id"": ""54918601-a7c2-4128-b6b1-fad6dbe3c4ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d4786c9a-7e20-4858-85df-e15c5c943fad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93d4543e-cef8-4903-b527-ac81f7360906"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9b6b76b-a767-4545-a90e-8f84d6d009f5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bbde851-bb67-4b4d-84f0-ea30742f3279"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2ccfee0-5be2-4d6a-ac0f-308013afda28"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(pressPoint=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66800a59-004b-4438-9b1f-a5fcf1928b7f"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // W_Controller
        m_W_Controller = asset.FindActionMap("W_Controller", throwIfNotFound: true);
        m_W_Controller_Movement = m_W_Controller.FindAction("Movement", throwIfNotFound: true);
        m_W_Controller_AutoAttack = m_W_Controller.FindAction("AutoAttack", throwIfNotFound: true);
        m_W_Controller_Ability1 = m_W_Controller.FindAction("Ability1", throwIfNotFound: true);
        m_W_Controller_Ability2 = m_W_Controller.FindAction("Ability2", throwIfNotFound: true);
        m_W_Controller_Ability3 = m_W_Controller.FindAction("Ability3", throwIfNotFound: true);
        m_W_Controller_CameraFocus = m_W_Controller.FindAction("CameraFocus", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // W_Controller
    private readonly InputActionMap m_W_Controller;
    private List<IW_ControllerActions> m_W_ControllerActionsCallbackInterfaces = new List<IW_ControllerActions>();
    private readonly InputAction m_W_Controller_Movement;
    private readonly InputAction m_W_Controller_AutoAttack;
    private readonly InputAction m_W_Controller_Ability1;
    private readonly InputAction m_W_Controller_Ability2;
    private readonly InputAction m_W_Controller_Ability3;
    private readonly InputAction m_W_Controller_CameraFocus;
    public struct W_ControllerActions
    {
        private @WarlordController m_Wrapper;
        public W_ControllerActions(@WarlordController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_W_Controller_Movement;
        public InputAction @AutoAttack => m_Wrapper.m_W_Controller_AutoAttack;
        public InputAction @Ability1 => m_Wrapper.m_W_Controller_Ability1;
        public InputAction @Ability2 => m_Wrapper.m_W_Controller_Ability2;
        public InputAction @Ability3 => m_Wrapper.m_W_Controller_Ability3;
        public InputAction @CameraFocus => m_Wrapper.m_W_Controller_CameraFocus;
        public InputActionMap Get() { return m_Wrapper.m_W_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(W_ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IW_ControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_W_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_W_ControllerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @AutoAttack.started += instance.OnAutoAttack;
            @AutoAttack.performed += instance.OnAutoAttack;
            @AutoAttack.canceled += instance.OnAutoAttack;
            @Ability1.started += instance.OnAbility1;
            @Ability1.performed += instance.OnAbility1;
            @Ability1.canceled += instance.OnAbility1;
            @Ability2.started += instance.OnAbility2;
            @Ability2.performed += instance.OnAbility2;
            @Ability2.canceled += instance.OnAbility2;
            @Ability3.started += instance.OnAbility3;
            @Ability3.performed += instance.OnAbility3;
            @Ability3.canceled += instance.OnAbility3;
            @CameraFocus.started += instance.OnCameraFocus;
            @CameraFocus.performed += instance.OnCameraFocus;
            @CameraFocus.canceled += instance.OnCameraFocus;
        }

        private void UnregisterCallbacks(IW_ControllerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @AutoAttack.started -= instance.OnAutoAttack;
            @AutoAttack.performed -= instance.OnAutoAttack;
            @AutoAttack.canceled -= instance.OnAutoAttack;
            @Ability1.started -= instance.OnAbility1;
            @Ability1.performed -= instance.OnAbility1;
            @Ability1.canceled -= instance.OnAbility1;
            @Ability2.started -= instance.OnAbility2;
            @Ability2.performed -= instance.OnAbility2;
            @Ability2.canceled -= instance.OnAbility2;
            @Ability3.started -= instance.OnAbility3;
            @Ability3.performed -= instance.OnAbility3;
            @Ability3.canceled -= instance.OnAbility3;
            @CameraFocus.started -= instance.OnCameraFocus;
            @CameraFocus.performed -= instance.OnCameraFocus;
            @CameraFocus.canceled -= instance.OnCameraFocus;
        }

        public void RemoveCallbacks(IW_ControllerActions instance)
        {
            if (m_Wrapper.m_W_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IW_ControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_W_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_W_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public W_ControllerActions @W_Controller => new W_ControllerActions(this);
    public interface IW_ControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAutoAttack(InputAction.CallbackContext context);
        void OnAbility1(InputAction.CallbackContext context);
        void OnAbility2(InputAction.CallbackContext context);
        void OnAbility3(InputAction.CallbackContext context);
        void OnCameraFocus(InputAction.CallbackContext context);
    }
}
